$(document).ready(function() {
    // Function to handle form submission and AJAX request
    function handleFormSubmit(formId, ajaxUrl, successCallback, failCallback) {
        $(formId).submit(function(e) {
            e.preventDefault(); // Prevent default form submission
            
            // Get form data
            var formData = $(this).serialize();
            
            // Perform AJAX request
            $.ajax({
                type: 'POST',
                url: ajaxUrl,
                data: formData,
                success: function(response, status, xhr) {
                    // Call the success callback function with response and status
                    successCallback(response, status, xhr);
                },
                error: function(xhr, status, error) {
                    // Log AJAX request error to the console
                    console.error('Erreur de requête AJAX:', error);
                    if (failCallback) {
                        failCallback(xhr, status, error);
                    }
                }
            });
        });
    }



// Optional fail callback
function loginFail(xhr, status, error) {
    // Handle login error
    console.log('Erreur de connexion:', xhr.responseText);
    $('#passwordError').show();
}

// Success callback functions
    function loginSuccess(response) {
        console.log('Connexion réussie!');
        window.location.href = '/';

    }

    function addCharacterSuccess(response) {
        if (response.message) {
            console.log('Character added successfully with ID:', response.id);
            window.location.href = '/personnages/' + response.message;
        } else {
            console.log('Error: Character ID not found in the response');
        }
        console.log('Réponse du serveur:', response);
    }

    function updateCaracSetSuccess(response) {
        console.log('Caracteristique set updated.!');
        console.log(response);
    }

    function deleteCharacterSuccess(response, status, xhr) {
        console.log('Character deleted successfully!');
        window.location.href = '/personnages';
        console.log('Réponse du serveur:', response);
    }

    // Attach handlers to forms
    handleFormSubmit('#loginForm', '/log/login', loginSuccess, loginFail);
    handleFormSubmit('#addCharacterForm', '/personnages/addCharacter', addCharacterSuccess);
    handleFormSubmit('#characSetForm', '/personnages/updateCaracSet', updateCaracSetSuccess);
    handleFormSubmit('#deleteCharacterForm', '/personnages/deleteCharacter', deleteCharacterSuccess);
});




$(document).ready(function() {
    $('.item-button').click(function() {
        var item_type = $(this).data('item-id') // Récupère l'ID de l'item depuis l'attribut data-item-id
        
        console.log(item_type)
        fetchModalContent({type: item_type}); // Appelle la fonction pour récupérer les données de l'item
    });
    $('#filter_form').submit(function(e) {
        e.preventDefault(); // Prevent the default form submission

        var formData = $(this).serialize();
        console.log('Form data:', formData);
        fetchModalContent(formData)
    });


function fetchModalContent(formData) {
    var url = "/items/getitems";  // Ensure this is resolved by Django
    $.ajax({
        url: url,
        method: 'POST',
        data: formData, // Envoie l'ID de l'item en tant que paramètre GET
        dataType: 'json',
        success: function(data) {
            // Met à jour le contenu de la modal avec les données des items récupérées
            var tbody = $('#items-table-body');
            tbody.empty(); // Vide le contenu existant

            // Parcourt les données et ajoute chaque item au tableau dans la modal
            data.forEach(function(item) {
                var row = `
                    <tr>
                        <td><img src="${item.image_urls__icon}" alt="${item.name}"></td>
                        <td><a href="/items/${item.ankama_id}">${item.name}</a></td>
                        <td>${item.type__name}</td>
                        <td>Lvl: ${item.level}</td>
                    </tr>
                `;
                tbody.append(row);
            });

            $('#itemsSelectionsModal').modal('show'); // Affiche la modal après avoir chargé les données
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de la récupération des items:', error);
        }
    });
}


function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

const csrftoken = getCookie('csrftoken');

function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}

$.ajaxSetup({
    beforeSend: function(xhr, settings) {
        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
            xhr.setRequestHeader("X-CSRFToken", csrftoken);
        }
    }
});
});

